// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MtgCardOrganizer.Core.Initialization;

namespace MtgCardOrganizer.Core.Migrations
{
    [DbContext(typeof(MtgCardOrganizerContext))]
    [Migration("20180814223030_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Cards.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConvertedManaCost");

                    b.Property<string>("ManaCost");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OracleText");

                    b.Property<string>("Power");

                    b.Property<string>("Toughness");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Cards.CardSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Artist")
                        .IsRequired();

                    b.Property<int?>("CardId")
                        .IsRequired();

                    b.Property<string>("MultiverseId");

                    b.Property<string>("Num");

                    b.Property<int>("Rarity");

                    b.Property<int>("SetId");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("SetId");

                    b.ToTable("CardSets");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Cards.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Collections.CardInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CardSetId");

                    b.Property<int>("CollectionId");

                    b.Property<bool>("Foil");

                    b.Property<bool>("Promo");

                    b.HasKey("Id");

                    b.HasIndex("CardSetId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CardInstances");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Collections.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContainerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Containers.Container", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OwnerUserId");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Containers.ContainerUserLink", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("ContainerId");

                    b.Property<int>("Permission");

                    b.HasKey("UserId", "ContainerId");

                    b.HasIndex("ContainerId");

                    b.ToTable("ContainerUserLinks");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Decks.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContainerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Decks.DeckCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CardId");

                    b.Property<int>("Count");

                    b.Property<int?>("DeckId");

                    b.Property<int>("Part");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("DeckId");

                    b.ToTable("DeckCards");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Other.Format", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Cards.CardSet", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Cards.Card", "Card")
                        .WithMany("CardSets")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MtgCardOrganizer.Core.Entities.Cards.Set", "Set")
                        .WithMany("CardSets")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Collections.CardInstance", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Cards.CardSet", "CardSet")
                        .WithMany("CardInstances")
                        .HasForeignKey("CardSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MtgCardOrganizer.Core.Entities.Collections.Collection", "Collection")
                        .WithMany("CardInstances")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Collections.Collection", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Containers.Container", "Container")
                        .WithMany("Collections")
                        .HasForeignKey("ContainerId");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Containers.Container", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Containers.Container", "Parent")
                        .WithMany("SubContainers")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Containers.ContainerUserLink", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Containers.Container", "Container")
                        .WithMany("ContainerUserLinks")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Decks.Deck", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Containers.Container", "Container")
                        .WithMany("Decks")
                        .HasForeignKey("ContainerId");
                });

            modelBuilder.Entity("MtgCardOrganizer.Core.Entities.Decks.DeckCard", b =>
                {
                    b.HasOne("MtgCardOrganizer.Core.Entities.Cards.Card", "Card")
                        .WithMany("DeckCards")
                        .HasForeignKey("CardId");

                    b.HasOne("MtgCardOrganizer.Core.Entities.Decks.Deck", "Deck")
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");
                });
#pragma warning restore 612, 618
        }
    }
}
